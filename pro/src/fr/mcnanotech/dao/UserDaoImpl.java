package fr.mcnanotech.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import fr.mcnanotech.beans.User;
import static fr.mcnanotech.dao.DAOUtil.*;

public class UserDaoImpl implements UserDao
{
    private DAOFactory daoFactory;

    UserDaoImpl(DAOFactory daoFactory)
    {
        this.daoFactory = daoFactory;
    }

    private static final String SQL_SELECT_BY_NAME = "SELECT System_ID, Username, Password, MDL_ID, Name, Surname FROM users WHERE Name = ?";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public User find(String name) throws DAOException
    {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User utilisateur = null;

        try
        {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initializePreparedRequest(connexion, SQL_SELECT_BY_NAME, false, name);
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de données de l'éventuel ResulSet retourné */
            if(resultSet.next())
            {
                utilisateur = map(resultSet);
            }
        }
        catch(SQLException e)
        {
            throw new DAOException(e);
        }
        finally
        {
            silentCloses(resultSet, preparedStatement, connexion);
        }

        return utilisateur;
    }

    private static final String SQL_INSERT = "INSERT INTO users (Username, Password, MDL_ID, Name, Surname) VALUES (?, ?, ?, ?,?)";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void create(User user) throws DAOException
    {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try
        {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initializePreparedRequest(connexion, SQL_INSERT, true, user.getUsername(), user.getPassword(), user.getMdlid(), user.getName(), user.getSurname());
            int status = preparedStatement.executeUpdate();
            /* Analyse du statut retourné par la requête d'insertion */
            if(status == 0)
            {
                throw new DAOException("Échec de la création de l'utilisateur, aucune ligne ajoutée dans la table.");
            }
            /* Récupération de l'id auto-généré par la requête d'insertion */
            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if(autoGeneratedValues.next())
            {
                /* Puis initialisation de la propriété id du bean Utilisateur avec sa valeur */
                user.setId(autoGeneratedValues.getLong(1));
            }
            else
            {
                throw new DAOException("Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
            }
        }
        catch(SQLException e)
        {
            throw new DAOException(e);
        }
        finally
        {
            silentCloses(autoGeneratedValues, preparedStatement, connexion);
        }
    }

    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des utilisateurs (un
     * ResultSet) et un bean Utilisateur.
     */
    private static User map(ResultSet resultSet) throws SQLException
    {
        User user = new User();
        user.setId(resultSet.getLong("id"));
        user.setUsername(resultSet.getString("username"));
        user.setPassword(resultSet.getString("password"));
        user.setMdlid(resultSet.getString("mdlid"));
        user.setName(resultSet.getString("name"));
        user.setSurname(resultSet.getString("surname"));
        return user;
    }
}
