package fr.mcnanotech.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

import fr.mcnanotech.dao.DAOException;
import fr.mcnanotech.beans.User;
import static fr.mcnanotech.dao.DAOUtil.*;

public class UserDaoImpl implements UserDao
{
    private DAOFactory daoFactory;

    UserDaoImpl(DAOFactory daoFactory)
    {
        this.daoFactory = daoFactory;
    }

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public User find(String search, String msql) throws DAOException
    {

        return findP(msql, search);
    }

    private User findP(String msql, String search) throws DAOException
    {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        User user = null;
        String sql = "SELECT id, username, password, mdlid, name, surname FROM users WHERE "+msql+" = ?";
        try
        {
            /* RÃ©cupÃ©ration d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            /*
             * PrÃ©paration de la requÃªte avec les objets passÃ©s en arguments
             * (ici, uniquement une adresse email) et exÃ©cution.
             */
            preparedStatement = initializePreparedRequest(connexion, sql, false, search);
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de donnÃ©es retournÃ©e dans le ResultSet */
            if(resultSet.next())
            {
                user = map(resultSet);
            }
        }
        catch(SQLException e)
        {
            throw new DAOException(e);
        }
        finally
        {
            silentCloses(resultSet, preparedStatement, connexion);
        }

        return user;
    }

    @Override
    public ArrayList<String[]> list() throws DAOException
    {
        ArrayList<String[]> dtableContent = new ArrayList<String[]>();

        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet resultSet = null;
        
        String sql2 = "SELECT username, mdlid, name, surname FROM users;";
        try
        {
            /* RÃ©cupÃ©ration d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            /*
             * PrÃ©paration de la requÃªte avec les objets passÃ©s en arguments
             * (ici, uniquement une adresse email) et exÃ©cution.
             */
            preparedStatement = initializePreparedRequest(connexion, sql2, false);
            resultSet = preparedStatement.executeQuery();
            /* Parcours de la ligne de donnÃ©es retournÃ©e dans le ResultSet */
            while ( resultSet.next() ) {
                String username = resultSet.getString("username");
                String mdlid = resultSet.getInt( "mdlid" )+"";
                String name = resultSet.getString("name");
                String surname = resultSet.getString("surname");
                String[] temp = { (String)mdlid , name, surname, username, };
                dtableContent.add(temp);
            }
        }
        catch(SQLException e)
        {
            throw new DAOException(e);
        }
        finally
        {
            silentCloses(resultSet, preparedStatement, connexion);
        }
        return dtableContent;
    }

    private static final String SQL_INSERT = "INSERT INTO users (username, password, mdlid, name, surname) VALUES (?, ?, ?, ?,?)";

    /* Implémentation de la méthode définie dans l'interface UtilisateurDao */
    @Override
    public void create(User user) throws IllegalArgumentException, DAOException
    {
        Connection connexion = null;
        PreparedStatement preparedStatement = null;
        ResultSet autoGeneratedValues = null;

        try
        {
            /* Récupération d'une connexion depuis la Factory */
            connexion = daoFactory.getConnection();
            preparedStatement = initializePreparedRequest(connexion, SQL_INSERT, true, user.getUsername(), user.getPassword(), user.getMdlid(), user.getName(), user.getSurname());
            int status = preparedStatement.executeUpdate();
            /* Analyse du statut retourné par la requête d'insertion */
            if(status == 0)
            {
                throw new DAOException("Échec de la création de l'utilisateur, aucune ligne ajoutée dans la table.");
            }
            /* Récupération de l'id auto-généré par la requête d'insertion */
            autoGeneratedValues = preparedStatement.getGeneratedKeys();
            if(autoGeneratedValues.next())
            {
                /* Puis initialisation de la propriété id du bean Utilisateur avec sa valeur */
                user.setId(autoGeneratedValues.getLong(1));
            }
            else
            {
                throw new DAOException("Échec de la création de l'utilisateur en base, aucun ID auto-généré retourné.");
            }
        }
        catch(SQLException e)
        {
            throw new DAOException(e);
        }
        finally
        {
            silentCloses(autoGeneratedValues, preparedStatement, connexion);
        }
    }

    /*
     * Simple méthode utilitaire permettant de faire la correspondance (le
     * mapping) entre une ligne issue de la table des utilisateurs (un
     * ResultSet) et un bean Utilisateur.
     */
    private static User map(ResultSet resultSet) throws SQLException
    {
        User user = new User();
        user.setId(resultSet.getLong("id"));
        user.setUsername(resultSet.getString("username"));
        user.setPassword(resultSet.getString("password"));
        user.setMdlid(resultSet.getString("mdlid"));
        user.setName(resultSet.getString("name"));
        user.setSurname(resultSet.getString("surname"));
        return user;
    }

}
